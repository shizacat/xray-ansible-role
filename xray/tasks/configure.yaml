- name: Config | Check configuration directory is exists
  ansible.builtin.file:
    path: "{{ xray_config_dir }}"
    state: directory
    owner: root
    group: root

- name: Config | Check if Xray config variables file exist
  ansible.builtin.stat:
    path: "{{ (xray_config_dir, 'config_vars.yaml') | path_join }}"
  register: config_vars_stat

- name: Config | Get Xray config
  when: config_vars_stat.stat.exists
  block:
    - name: Read Xray config variables
      ansible.builtin.slurp:
        src: "{{ (xray_config_dir, 'config_vars.yaml') | path_join }}"
      register: config_vars

    - name: Decode and set Xray variables from file
      ansible.builtin.set_fact:
        xray: "{{ config_vars['content'] | b64decode | from_yaml }}"

- name: Config | Set Xray config variables
  when: not config_vars_stat.stat.exists
  block:
    - name: Create xray_short_id
      ansible.builtin.command: openssl rand -hex 8
      register: short_id_result
      changed_when: true

    - name: Create xray_uuid
      ansible.builtin.command:
        cmd: "{{ (xray_bin_path, 'xray') | path_join }} uuid"
      register: uuid_result
      changed_when: true

    - name: Generate x25519 keys
      ansible.builtin.command:
        cmd: "{{ (xray_bin_path, 'xray') | path_join }} x25519"
      register: x25519_result
      changed_when: true

    - name: Set variables
      ansible.builtin.set_fact:
        xray:
          short_id: "{{ short_id_result.stdout }}"
          uuid: "{{ uuid_result.stdout }}"
          x25519_private: "{{ x25519_result.stdout.split('\n')[0].split(': ')[1] }}"
          x25519_public: "{{ x25519_result.stdout.split('\n')[1].split(': ')[1] }}"

    - name: Write variables file
      ansible.builtin.template:
        src: variables.yaml.j2
        dest: "{{ (xray_config_dir, 'config_vars.yaml') | path_join }}"
        mode: '0644'

- name: Config | Write new Xray config
  ansible.builtin.template:
    src: config.json.j2
    dest: "{{ (xray_config_dir, 'config.json') | path_join }}"
    mode: '0644'
  # Even if we didn't change the config, we want to restart systemd service when a new versions is deployed
  changed_when: (xray_version_current.content is not defined) or (xray_version_current.content | b64decode | default('') | trim != xray_version)
  notify: Restart Xray
